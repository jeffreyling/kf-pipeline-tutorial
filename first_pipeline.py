import kfp
import kfp.dsl as dsl
from kfp.components import func_to_container_op
from kfp.v2.dsl import component
from kfp.v2.components.types.type_annotations import Output
from kfp.v2.components.types.artifact_types import ClassificationMetrics

@func_to_container_op
def show_results(decision_tree : float, logistic_regression : float) -> None:
    # Given the outputs from decision_tree and logistic regression components
    # the results are shown.

    print(f"Decision tree (accuracy): {decision_tree}")
    print(f"Logistic regression (accuracy): {logistic_regression}")


@component(
    packages_to_install=['sklearn'],
    base_image='python:3.8-slim'
)
def decision_tree_2(data_path, metrics: Output[ClassificationMetrics]):
    import json
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.metrics import confusion_matrix
    from sklearn.metrics import roc_curve

    # Open and reads file "data"
    with open(data_path) as data_file:
        data = json.load(data_file)
    
    # The excted data type is 'dict', however since the file
    # was loaded as a json object, it is first loaded as a string
    # thus we need to load again from such string in order to get 
    # the dict-type object.
    data = json.loads(data)

    x_train = data['x_train']
    y_train = data['y_train']
    x_test = data['x_test']
    y_test = data['y_test']
    
    # Initialize and train the model
    model = DecisionTreeClassifier(max_depth=3)
    model.fit(x_train, y_train)

    # Get predictions
    y_pred = model.predict(x_test)
    y_scores = model.predict_proba(x_test)
    
    metrics.log_confusion_matrix(
        ['positive', 'negative'],
        confusion_matrix(y_test, y_pred).tolist()
    )

    fpr, tpr, thresholds = roc_curve(y_true=y_train, y_score=y_scores[:,1], pos_label=True)
    metrics.log_roc_curve(fpr, tpr, thresholds)


@dsl.pipeline(name='First Pipeline', description='Applies Decision Tree and Logistic Regression for classification problem.')
def first_pipeline():

    # Loads the yaml manifest for each component
    download = kfp.components.load_component_from_file('download_data/download_data.yaml')
    decision_tree = kfp.components.load_component_from_file('decision_tree/decision_tree.yaml')
    logistic_regression = kfp.components.load_component_from_file('logistic_regression/logistic_regression.yaml')

    # Run download_data task
    download_task = download()

    # With the confusion matirx vis
    decision_tree_op = decision_tree_2(download_task.output)

    # Run tasks "decison_tree" and "logistic_regression" given
    # the output generated by "download_task".
    decision_tree_task = decision_tree(download_task.output)
    logistic_regression_task = logistic_regression(download_task.output)

    # Given the outputs from "decision_tree" and "logistic_regression"
    # the component "show_results" is called to print the results.
    show_results(decision_tree_task.output, logistic_regression_task.output)


if __name__ == '__main__':
    kfp.compiler.Compiler(
        mode=kfp.dsl.PipelineExecutionMode.V2_COMPATIBLE
    ).compile(first_pipeline, 'FirstPipeline.yaml')
